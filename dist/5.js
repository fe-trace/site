(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{145:function(n,o,e){"use strict";e.r(o),o.default="<h2 id=\"tapable\">tapable</h2>\n<p>tapable 是 webpack 打包过程中进行流程控制的核心。tapable 提供了多种类型的 hook，能够满足同步，异步，并行，串行，值传递 等执行场景。</p>\n<h3 id=\"hook\">Hook</h3>\n<p>tapable 提供了流程控制的基类：Hook。基类中提供了公共的流程控制逻辑，在具体的子类中可以进行重写和扩展。</p>\n<h3 id=\"hook-1\">Hook 构造函数</h3>\n<pre><code>function Hook(String[]: args) { }\n</code></pre>\n<p>PS：实例化 Hook 需要一个字符串数组作为参数，字符串数组中字符可以是任意字符，在内部实现中没有具体含义，主要是用来标记回调函数的参数个数以及动态生成回调函数时作为参数名称使用。</p>\n<h3 id=\"hook-2\">Hook 函数特性</h3>\n<p>| 类型 | 特点 |\n|:- | - |\n|SyncHook | 回调串行执行，return 不能中断回调队列，没有返回值 |\n|SyncBailHook | 回调串行执行，事件处理函数返回值不为 undefined 能中断回调队列，返回值为return值 |\n|SyncWaterfallHook | 回调串行执行，return不能中断回调队列，上一个事件处理函数返回值会作为后面回调的入参，最后一个return值为调用结果返回值 |\n|SyncLoopHook | 回调串行执行，事件处理函数返回值不为 undefined 时会重复执行回调（重复执行第一个到当前回调），没有返回值 |\n|AsyncParallelHook | 异步并行执行 |\n|AsyncParallelBailHook | 异步并行执行，事件处理函数有返回值时不继续往后执行 |\n|AsyncSeriesHook | 异步串行执行 |\n|AsyncSeriesBailHook | 异步串行执行，事件处理函数有返回值时不继续往后执行 |\n|AsyncSeriesWaterfallHook | 异步串行执行，上一个事件处理函数返回值作为参数传递给下一个事件处理函数 |</p>\n<h3 id=\"hook-3\">Hook 函数注册和调用方式</h3>\n<p>类型 | 注册方式 | 调用方式\n:- | - | -\nSyncHook | tap | call\nSyncBailHook | tap | call\nSyncWaterfallHook | tap | call\nSyncLoopHook | tap | call\nAsyncParallelHook | tap/tapAsync/tapPromise | callAsync/promise \nAsyncParallelBailHook | tap/tapAsync/tapPromise | callAsync/promise\nAsyncSeriesHook | tap/tapAsync/tapPromise | callAsync/promise\nAsyncSeriesBailHook | tap/tapAsync/tapPromise | callAsync/promise\nAsyncSeriesWaterfallHook | tap/tapAsync/tapPromise | callAsync/promise</p>\n<h3 id=\"hook-4\">Hook 使用</h3>\n<p>SyncHook</p>\n<pre><code>const { SyncHook } = require('tapable');\n// 实例化 Hook(字符串数组用来标识参数个数)\nconst hook = new SyncHook(['name', 'age']);\n\n// 在 Hook 实例上注册一个回调函数('event'可以是任意字符串)\nhook.tap('event', function(name, age) {\n    // name = 'tom' \n    // age  =  20\n});\n// 回调 Hook 实例上注册的方法(传入参数个数需要和实例化时字符串数组长度对应，过长会被舍去，不足时对应字段为 undefined)\nhook.call('tom', 20);\n</code></pre>\n<p>SyncBailHook</p>\n<pre><code>const hook = new SyncBailHook(['name']);\nhook.tap('sync', function(name) {\n    console.log(`1-${name}`);\n});\nhook.tap('sync', function(name) {\n    console.log(`2-${name}`);\n    return 2;\n});\nhook.tap('sync', function(name) {\n    console.log(`3-${name}`);\n});\nconst data = hook.call('tom');\nconsole.log(\"data: \", data);\n// 1-tom\n// 2-tom\n// data:  2\n</code></pre>\n<p>SyncWaterfallHook</p>\n<pre><code>const hook = new SyncWaterfallHook(['name']);\nhook.tap('sync', function(name) {\n    console.log(`1-${name}`);\n    return 1;\n});\nhook.tap('sync', function(name) {\n    console.log(`2-${name}`);\n    return 2;\n});\nhook.tap('sync', function(name) {\n    console.log(`3-${name}`);\n});\nconst data = hook.call('tom');\nconsole.log(\"data: \", data);\n// 1-tom\n// 2-1\n// 3-2\n// data:  2\n</code></pre>\n<p>SyncLoopHook</p>\n<pre><code>const hook = new SyncLoopHook(['name']);\nhook.tap('sync', function(name) {\n    console.log(`1-${name}`);\n});\nhook.tap('sync', function(name) {\n    console.log(`2-${name}`);\n});\nhook.tap('sync', function(name) {\n    console.log(`3-${name}`);\n});\nconst data = hook.call('tom');\nconsole.log(\"data: \", data);\n// 1-tom\n// 2-tom\n// 3-tom\n// data:  undefined\n</code></pre>\n<p>AsyncParallelHook</p>\n<pre><code>const asyncHook = new AsyncParallelHook(['name']);\nconsole.time('time');\nasyncHook.tapPromise('promise-1', function(name) {\n    console.log(\"promise 1 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(1)\n        }, 1000)\n    });\n});\nasyncHook.tapPromise('promise-2', function(name) {\n    console.log(\"promise 2 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(2)\n        }, 3000)\n    });\n});\nasyncHook.promise(2).then(function(data) {\n    console.log('call: ', data);\n    console.timeEnd('time');\n});\n// promise 1  2\n// promise 2  2\n// call:  undefined\n// time: 3007.090ms\n</code></pre>\n<p>AsyncParallelBailHook</p>\n<pre><code>const asyncHook = new AsyncParallelBailHook(['name']);\nconsole.time('time');\nasyncHook.tapPromise('promise-1', function(name) {\n    console.log(\"promise 1 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(1)\n        }, 1000)\n    });\n});\nasyncHook.tapPromise('promise-2', function(name) {\n    console.log(\"promise 2 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(2)\n        }, 3000)\n    });\n});\nasyncHook.promise(2).then(function(data) {\n    console.log('call: ', data);\n    console.timeEnd('time');\n});\n// promise 1  2\n// promise 2  2\n// call:  1\n// time: 1009.113ms\n</code></pre>\n<p>AsyncSeriesHook</p>\n<pre><code>const asyncHook = new AsyncSeriesHook(['name']);\nconsole.time('time');\nasyncHook.tapPromise('promise-1', function(name) {\n    console.log(\"promise 1 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(1)\n        }, 1000)\n    });\n});\nasyncHook.tapPromise('promise-2', function(name) {\n    console.log(\"promise 2 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(2)\n        }, 3000)\n    });\n});\nasyncHook.promise(2).then(function(data) {\n    console.log('call: ', data);\n    console.timeEnd('time');\n});\n// promise 1  2\n// promise 2  2\n// call:  undefined\n// time: 4010.490ms\n</code></pre>\n<p>AsyncSeriesBailHook</p>\n<pre><code>const asyncHook = new AsyncSeriesBailHook(['name']);\nconsole.time('time');\nasyncHook.tapPromise('promise-1', function(name) {\n    console.log(\"promise 1 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(1)\n        }, 1000)\n    });\n});\nasyncHook.tapPromise('promise-2', function(name) {\n    console.log(\"promise 2 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(2)\n        }, 3000)\n    });\n});\nasyncHook.promise(2).then(function(data) {\n    console.log('call: ', data);\n    console.timeEnd('time');\n});\n// promise 1  2\n// call:  1\n// time: 1005.311ms\n</code></pre>\n<p>AsyncSeriesWaterfallHook</p>\n<pre><code>const asyncHook = new AsyncSeriesWaterfallHook(['name']);\nconsole.time('time');\nasyncHook.tapPromise('promise-1', function(name) {\n    console.log(\"promise 1 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(1)\n        }, 1000)\n    });\n});\nasyncHook.tapPromise('promise-2', function(name) {\n    console.log(\"promise 2 \", name);\n    return new Promise(function(resolve) {\n        setTimeout(function() {\n            resolve(2)\n        }, 3000)\n    });\n});\nasyncHook.promise(2).then(function(data) {\n    console.log('call: ', data);\n    console.timeEnd('time');\n});\n// promise 1  2\n// promise 2  1\n// call:  2\n// time: 4015.683ms\n</code></pre>"}}]);